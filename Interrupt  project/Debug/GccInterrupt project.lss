
GccInterrupt project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000040a  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b43  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fe  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000454  00000000  00000000  00001665  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000367  00000000  00000000  00001b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006d6  00000000  00000000  00001e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 81 00 	call	0x102	; 0x102 <main>
  8a:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ExInterrupt_Init>:
	
	#define SevenSeg_direction	DDRA		/* define LED Direction */
	#define SevenSeg_PORT		PORTA
	
	void ExInterrupt_Init(){
		CLR_BIT(DDRD,2); //PD2 as input to Led 0,1,2
  92:	8a 98       	cbi	0x11, 2	; 17
		GICR=(1<<INT0);   //Enable External Interrupts INT1
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
		MCUCR  &=~(1<<ISC00);       //falling edge
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	85 bf       	out	0x35, r24	; 53
		MCUCR  |=(1<<ISC01);       //falling edge
  9e:	85 b7       	in	r24, 0x35	; 53
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	85 bf       	out	0x35, r24	; 53
	
		sei();     // Enable global interrupts by setting global interrupt enable bit in SREG
  a4:	78 94       	sei
  a6:	08 95       	ret

000000a8 <sevenSegment>:
	}
	/*
	
	*/
	void sevenSegment(){
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
  b0:	2a 97       	sbiw	r28, 0x0a	; 10
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
				SevenSeg_EN_PORT |= SevenSEG_EN1 | SevenSEG_EN2; //Enable Seven Seg
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	86 60       	ori	r24, 0x06	; 6
  c0:	88 bb       	out	0x18, r24	; 24
				sevenSegment();
  c2:	0e 94 54 00 	call	0xa8	; 0xa8 <sevenSegment>
	
		char array[]={0,1,2,3,4,5,6,7,8,9};
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	e0 e6       	ldi	r30, 0x60	; 96
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	de 01       	movw	r26, r28
  ce:	11 96       	adiw	r26, 0x01	; 1
  d0:	01 90       	ld	r0, Z+
  d2:	0d 92       	st	X+, r0
  d4:	8a 95       	dec	r24
  d6:	e1 f7       	brne	.-8      	; 0xd0 <sevenSegment+0x28>
  d8:	fe 01       	movw	r30, r28
  da:	31 96       	adiw	r30, 0x01	; 1
  dc:	9e 01       	movw	r18, r28
  de:	25 5f       	subi	r18, 0xF5	; 245
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
		/* write BCD value for CA display from 0 to 9 */
	
		for(int i=0;i<10;i++)
		{
			
			SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
  e2:	81 91       	ld	r24, Z+
  e4:	82 95       	swap	r24
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	8b bb       	out	0x1b, r24	; 27
				sevenSegment();
	
		char array[]={0,1,2,3,4,5,6,7,8,9};
		/* write BCD value for CA display from 0 to 9 */
	
		for(int i=0;i<10;i++)
  ea:	e2 17       	cp	r30, r18
  ec:	f3 07       	cpc	r31, r19
  ee:	c9 f7       	brne	.-14     	; 0xe2 <sevenSegment+0x3a>
		{
			
			SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
			//_delay_ms(100); /* wait for 500 melli second */
		}
	}
  f0:	2a 96       	adiw	r28, 0x0a	; 10
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <main>:
	int main(void)
	{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	2a 97       	sbiw	r28, 0x0a	; 10
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
		 ExInterrupt_Init();
 116:	0e 94 49 00 	call	0x92	; 0x92 <ExInterrupt_Init>
		//Seven segment pins to be output
		SevenSeg_direction |=(1<<4) |(1<<5) | (1<<6) | (1<<7);//PA4 to PA7
 11a:	8a b3       	in	r24, 0x1a	; 26
 11c:	80 6f       	ori	r24, 0xF0	; 240
 11e:	8a bb       	out	0x1a, r24	; 26
		SevenSeg_EN_DIR |= SevenSEG_EN1 | SevenSEG_EN2; //PB1 , PB2 are output for EN sv
 120:	87 b3       	in	r24, 0x17	; 23
 122:	86 60       	ori	r24, 0x06	; 6
 124:	87 bb       	out	0x17, r24	; 23
 126:	8e 01       	movw	r16, r28
 128:	05 5f       	subi	r16, 0xF5	; 245
 12a:	1f 4f       	sbci	r17, 0xFF	; 255
 12c:	2e 01       	movw	r4, r28
 12e:	2a e0       	ldi	r18, 0x0A	; 10
 130:	42 0e       	add	r4, r18
 132:	51 1c       	adc	r5, r1
 134:	3e 01       	movw	r6, r28
 136:	89 e0       	ldi	r24, 0x09	; 9
 138:	68 0e       	add	r6, r24
 13a:	71 1c       	adc	r7, r1
 13c:	4e 01       	movw	r8, r28
 13e:	98 e0       	ldi	r25, 0x08	; 8
 140:	89 0e       	add	r8, r25
 142:	91 1c       	adc	r9, r1
 144:	5e 01       	movw	r10, r28
 146:	27 e0       	ldi	r18, 0x07	; 7
 148:	a2 0e       	add	r10, r18
 14a:	b1 1c       	adc	r11, r1
 14c:	6e 01       	movw	r12, r28
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	c8 0e       	add	r12, r24
 152:	d1 1c       	adc	r13, r1
 154:	7e 01       	movw	r14, r28
 156:	95 e0       	ldi	r25, 0x05	; 5
 158:	e9 0e       	add	r14, r25
 15a:	f1 1c       	adc	r15, r1
	    while (1) 
	    {
			if( GET_BIT(PIND,2)==1)
 15c:	82 9b       	sbis	0x10, 2	; 16
 15e:	2a c0       	rjmp	.+84     	; 0x1b4 <main+0xb2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	86 e7       	ldi	r24, 0x76	; 118
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x64>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x6e>
 170:	00 00       	nop
			{_delay_ms(30);  //debounce time
						SevenSeg_EN_PORT |= SevenSEG_EN1 | SevenSEG_EN2; //Enable Seven Seg
 172:	88 b3       	in	r24, 0x18	; 24
 174:	86 60       	ori	r24, 0x06	; 6
 176:	88 bb       	out	0x18, r24	; 24
						sevenSegment();
 178:	0e 94 54 00 	call	0xa8	; 0xa8 <sevenSegment>
				          char array[]={0,1,2,3,4,5,6,7,8,9};
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	e0 e6       	ldi	r30, 0x60	; 96
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	de 01       	movw	r26, r28
 184:	11 96       	adiw	r26, 0x01	; 1
 186:	01 90       	ld	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	8a 95       	dec	r24
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x84>
 18e:	fe 01       	movw	r30, r28
 190:	31 96       	adiw	r30, 0x01	; 1
				/* write BCD value for CA display from 0 to 9 */
				for(int i=0;i<10;i++)
				{
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 192:	81 91       	ld	r24, Z+
 194:	82 95       	swap	r24
 196:	80 7f       	andi	r24, 0xF0	; 240
 198:	8b bb       	out	0x1b, r24	; 27
 19a:	2f ef       	ldi	r18, 0xFF	; 255
 19c:	81 ee       	ldi	r24, 0xE1	; 225
 19e:	94 e0       	ldi	r25, 0x04	; 4
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x9e>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xa8>
 1aa:	00 00       	nop
			{_delay_ms(30);  //debounce time
						SevenSeg_EN_PORT |= SevenSEG_EN1 | SevenSEG_EN2; //Enable Seven Seg
						sevenSegment();
				          char array[]={0,1,2,3,4,5,6,7,8,9};
				/* write BCD value for CA display from 0 to 9 */
				for(int i=0;i<10;i++)
 1ac:	0e 17       	cp	r16, r30
 1ae:	1f 07       	cpc	r17, r31
 1b0:	81 f7       	brne	.-32     	; 0x192 <main+0x90>
 1b2:	d4 cf       	rjmp	.-88     	; 0x15c <main+0x5a>
				{
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
					_delay_ms(100); /* wait for 500 melli second */
				                
				}
		        }else if( GET_BIT(PIND,2)==1)
 1b4:	82 9b       	sbis	0x10, 2	; 16
 1b6:	17 c0       	rjmp	.+46     	; 0x1e6 <main+0xe4>
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	86 e7       	ldi	r24, 0x76	; 118
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0xbc>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0xc6>
 1c8:	00 00       	nop
			                    {_delay_ms(30);      //debounce time
						   char array[]={0,1,2,3,4,5,6,7,8,9};
 1ca:	8a e0       	ldi	r24, 0x0A	; 10
 1cc:	e0 e6       	ldi	r30, 0x60	; 96
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	de 01       	movw	r26, r28
 1d2:	11 96       	adiw	r26, 0x01	; 1
 1d4:	01 90       	ld	r0, Z+
 1d6:	0d 92       	st	X+, r0
 1d8:	8a 95       	dec	r24
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0xd2>
				     /* write BCD value for CA display from 0 to 9 */
					        	for(int i=0;i<1;i++)
						        {
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	82 95       	swap	r24
 1e0:	80 7f       	andi	r24, 0xF0	; 240
 1e2:	8b bb       	out	0x1b, r24	; 27
 1e4:	bb cf       	rjmp	.-138    	; 0x15c <main+0x5a>
					//_delay_ms(100); /* wait for 500 melli second */
				}
				}else if( GET_BIT(PIND,2)==1)
 1e6:	82 9b       	sbis	0x10, 2	; 16
 1e8:	1b c0       	rjmp	.+54     	; 0x220 <main+0x11e>
 1ea:	2f ef       	ldi	r18, 0xFF	; 255
 1ec:	86 e7       	ldi	r24, 0x76	; 118
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	21 50       	subi	r18, 0x01	; 1
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	90 40       	sbci	r25, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0xee>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xf8>
 1fa:	00 00       	nop
						        {_delay_ms(30);      //debounce time
							char array[]={0,1,2,3,4,5,6,7,8,9};
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	e0 e6       	ldi	r30, 0x60	; 96
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	de 01       	movw	r26, r28
 204:	11 96       	adiw	r26, 0x01	; 1
 206:	01 90       	ld	r0, Z+
 208:	0d 92       	st	X+, r0
 20a:	8a 95       	dec	r24
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x104>
					/* write BCD value for CA display from 0 to 9 */
							   for(int i=0;i<2;i++)
							    {
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 20e:	89 81       	ldd	r24, Y+1	; 0x01
 210:	82 95       	swap	r24
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	8b bb       	out	0x1b, r24	; 27
 216:	8a 81       	ldd	r24, Y+2	; 0x02
 218:	82 95       	swap	r24
 21a:	80 7f       	andi	r24, 0xF0	; 240
 21c:	8b bb       	out	0x1b, r24	; 27
 21e:	9e cf       	rjmp	.-196    	; 0x15c <main+0x5a>
					//_delay_ms(100); /* wait for 500 melli second */
				}
				}else if( GET_BIT(PIND,2)==1)
 220:	82 9b       	sbis	0x10, 2	; 16
 222:	1f c0       	rjmp	.+62     	; 0x262 <main+0x160>
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	86 e7       	ldi	r24, 0x76	; 118
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x128>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x132>
 234:	00 00       	nop
							    {_delay_ms(30);      //debounce time
						  char array[]={0,1,2,3,4,5,6,7,8,9};
 236:	8a e0       	ldi	r24, 0x0A	; 10
 238:	e0 e6       	ldi	r30, 0x60	; 96
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	de 01       	movw	r26, r28
 23e:	11 96       	adiw	r26, 0x01	; 1
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	8a 95       	dec	r24
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x13e>
					/* write BCD value for CA display from 0 to 9 */
						        for(int i=0;i<3;i++)
					            {			
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	82 95       	swap	r24
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	8b bb       	out	0x1b, r24	; 27
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	82 95       	swap	r24
 254:	80 7f       	andi	r24, 0xF0	; 240
 256:	8b bb       	out	0x1b, r24	; 27
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	82 95       	swap	r24
 25c:	80 7f       	andi	r24, 0xF0	; 240
 25e:	8b bb       	out	0x1b, r24	; 27
 260:	7d cf       	rjmp	.-262    	; 0x15c <main+0x5a>
					//_delay_ms(100); /* wait for 500 melli second */
				}
				}else if( GET_BIT(PIND,2)==1)
 262:	82 9b       	sbis	0x10, 2	; 16
 264:	1c c0       	rjmp	.+56     	; 0x29e <main+0x19c>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	86 e7       	ldi	r24, 0x76	; 118
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <main+0x16a>
 274:	00 c0       	rjmp	.+0      	; 0x276 <main+0x174>
 276:	00 00       	nop
								{_delay_ms(30);      //debounce time
							char array[]={0,1,2,3,4,5,6,7,8,9};
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	e0 e6       	ldi	r30, 0x60	; 96
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	de 01       	movw	r26, r28
 280:	11 96       	adiw	r26, 0x01	; 1
 282:	01 90       	ld	r0, Z+
 284:	0d 92       	st	X+, r0
 286:	8a 95       	dec	r24
 288:	e1 f7       	brne	.-8      	; 0x282 <main+0x180>
 28a:	fe 01       	movw	r30, r28
 28c:	31 96       	adiw	r30, 0x01	; 1
					/* write BCD value for CA display from 0 to 9 */
							    for(int i=0;i<4;i++)
								{
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 28e:	81 91       	ld	r24, Z+
 290:	82 95       	swap	r24
 292:	80 7f       	andi	r24, 0xF0	; 240
 294:	8b bb       	out	0x1b, r24	; 27
				}
				}else if( GET_BIT(PIND,2)==1)
								{_delay_ms(30);      //debounce time
							char array[]={0,1,2,3,4,5,6,7,8,9};
					/* write BCD value for CA display from 0 to 9 */
							    for(int i=0;i<4;i++)
 296:	ee 16       	cp	r14, r30
 298:	ff 06       	cpc	r15, r31
 29a:	c9 f7       	brne	.-14     	; 0x28e <main+0x18c>
 29c:	5f cf       	rjmp	.-322    	; 0x15c <main+0x5a>
								{
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
					//_delay_ms(100); /* wait for 500 melli second */
				}
				}else if( GET_BIT(PIND,2)==1)
 29e:	82 9b       	sbis	0x10, 2	; 16
 2a0:	1c c0       	rjmp	.+56     	; 0x2da <main+0x1d8>
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	86 e7       	ldi	r24, 0x76	; 118
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x1a6>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x1b0>
 2b2:	00 00       	nop
							    {_delay_ms(30);      //debounce time
							char array[]={0,1,2,3,4,5,6,7,8,9};
 2b4:	8a e0       	ldi	r24, 0x0A	; 10
 2b6:	e0 e6       	ldi	r30, 0x60	; 96
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	de 01       	movw	r26, r28
 2bc:	11 96       	adiw	r26, 0x01	; 1
 2be:	01 90       	ld	r0, Z+
 2c0:	0d 92       	st	X+, r0
 2c2:	8a 95       	dec	r24
 2c4:	e1 f7       	brne	.-8      	; 0x2be <main+0x1bc>
 2c6:	fe 01       	movw	r30, r28
 2c8:	31 96       	adiw	r30, 0x01	; 1
					/* write BCD value for CA display from 0 to 9 */
								for(int i=0;i<5;i++)
							    {
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 2ca:	81 91       	ld	r24, Z+
 2cc:	82 95       	swap	r24
 2ce:	80 7f       	andi	r24, 0xF0	; 240
 2d0:	8b bb       	out	0x1b, r24	; 27
				}
				}else if( GET_BIT(PIND,2)==1)
							    {_delay_ms(30);      //debounce time
							char array[]={0,1,2,3,4,5,6,7,8,9};
					/* write BCD value for CA display from 0 to 9 */
								for(int i=0;i<5;i++)
 2d2:	ce 16       	cp	r12, r30
 2d4:	df 06       	cpc	r13, r31
 2d6:	c9 f7       	brne	.-14     	; 0x2ca <main+0x1c8>
 2d8:	41 cf       	rjmp	.-382    	; 0x15c <main+0x5a>
							    {
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
					//_delay_ms(100); /* wait for 500 melli second */
				}
				}else if( GET_BIT(PIND,2)==1)
 2da:	82 9b       	sbis	0x10, 2	; 16
 2dc:	1c c0       	rjmp	.+56     	; 0x316 <main+0x214>
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	86 e7       	ldi	r24, 0x76	; 118
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <main+0x1e2>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <main+0x1ec>
 2ee:	00 00       	nop
								{_delay_ms(30);      //debounce time
							char array[]={0,1,2,3,4,5,6,7,8,9};
 2f0:	8a e0       	ldi	r24, 0x0A	; 10
 2f2:	e0 e6       	ldi	r30, 0x60	; 96
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	de 01       	movw	r26, r28
 2f8:	11 96       	adiw	r26, 0x01	; 1
 2fa:	01 90       	ld	r0, Z+
 2fc:	0d 92       	st	X+, r0
 2fe:	8a 95       	dec	r24
 300:	e1 f7       	brne	.-8      	; 0x2fa <main+0x1f8>
 302:	fe 01       	movw	r30, r28
 304:	31 96       	adiw	r30, 0x01	; 1
					/* write BCD value for CA display from 0 to 9 */
								for(int i=0;i<6;i++)
								{
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 306:	81 91       	ld	r24, Z+
 308:	82 95       	swap	r24
 30a:	80 7f       	andi	r24, 0xF0	; 240
 30c:	8b bb       	out	0x1b, r24	; 27
				}
				}else if( GET_BIT(PIND,2)==1)
								{_delay_ms(30);      //debounce time
							char array[]={0,1,2,3,4,5,6,7,8,9};
					/* write BCD value for CA display from 0 to 9 */
								for(int i=0;i<6;i++)
 30e:	ae 16       	cp	r10, r30
 310:	bf 06       	cpc	r11, r31
 312:	c9 f7       	brne	.-14     	; 0x306 <main+0x204>
 314:	23 cf       	rjmp	.-442    	; 0x15c <main+0x5a>
								{
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
					//_delay_ms(100); /* wait for 500 melli second */
				}
				}else if( GET_BIT(PIND,2)==1)
 316:	82 9b       	sbis	0x10, 2	; 16
 318:	1c c0       	rjmp	.+56     	; 0x352 <main+0x250>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	86 e7       	ldi	r24, 0x76	; 118
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <main+0x21e>
 328:	00 c0       	rjmp	.+0      	; 0x32a <main+0x228>
 32a:	00 00       	nop
								{_delay_ms(30);      //debounce time
							char array[]={0,1,2,3,4,5,6,7,8,9};
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	e0 e6       	ldi	r30, 0x60	; 96
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	de 01       	movw	r26, r28
 334:	11 96       	adiw	r26, 0x01	; 1
 336:	01 90       	ld	r0, Z+
 338:	0d 92       	st	X+, r0
 33a:	8a 95       	dec	r24
 33c:	e1 f7       	brne	.-8      	; 0x336 <main+0x234>
 33e:	fe 01       	movw	r30, r28
 340:	31 96       	adiw	r30, 0x01	; 1
			    	/* write BCD value for CA display from 0 to 9 */
								for(int i=0;i<7;i++)
								{										
		    		SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 342:	81 91       	ld	r24, Z+
 344:	82 95       	swap	r24
 346:	80 7f       	andi	r24, 0xF0	; 240
 348:	8b bb       	out	0x1b, r24	; 27
				}
				}else if( GET_BIT(PIND,2)==1)
								{_delay_ms(30);      //debounce time
							char array[]={0,1,2,3,4,5,6,7,8,9};
			    	/* write BCD value for CA display from 0 to 9 */
								for(int i=0;i<7;i++)
 34a:	8e 16       	cp	r8, r30
 34c:	9f 06       	cpc	r9, r31
 34e:	c9 f7       	brne	.-14     	; 0x342 <main+0x240>
 350:	05 cf       	rjmp	.-502    	; 0x15c <main+0x5a>
								{										
		    		SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
					//_delay_ms(100); /* wait for 500 melli second */
				}
				}else if( GET_BIT(PIND,2)==1)
 352:	82 9b       	sbis	0x10, 2	; 16
 354:	1c c0       	rjmp	.+56     	; 0x38e <main+0x28c>
 356:	2f ef       	ldi	r18, 0xFF	; 255
 358:	86 e7       	ldi	r24, 0x76	; 118
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x25a>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x264>
 366:	00 00       	nop
								{_delay_ms(30);      //debounce time
						    char array[]={0,1,2,3,4,5,6,7,8,9};
 368:	8a e0       	ldi	r24, 0x0A	; 10
 36a:	e0 e6       	ldi	r30, 0x60	; 96
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	de 01       	movw	r26, r28
 370:	11 96       	adiw	r26, 0x01	; 1
 372:	01 90       	ld	r0, Z+
 374:	0d 92       	st	X+, r0
 376:	8a 95       	dec	r24
 378:	e1 f7       	brne	.-8      	; 0x372 <main+0x270>
 37a:	fe 01       	movw	r30, r28
 37c:	31 96       	adiw	r30, 0x01	; 1
					/* write BCD value for CA display from 0 to 9 */

								for(int i=0;i<8;i++)
								{	
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 37e:	81 91       	ld	r24, Z+
 380:	82 95       	swap	r24
 382:	80 7f       	andi	r24, 0xF0	; 240
 384:	8b bb       	out	0x1b, r24	; 27
				}else if( GET_BIT(PIND,2)==1)
								{_delay_ms(30);      //debounce time
						    char array[]={0,1,2,3,4,5,6,7,8,9};
					/* write BCD value for CA display from 0 to 9 */

								for(int i=0;i<8;i++)
 386:	6e 16       	cp	r6, r30
 388:	7f 06       	cpc	r7, r31
 38a:	c9 f7       	brne	.-14     	; 0x37e <main+0x27c>
 38c:	e7 ce       	rjmp	.-562    	; 0x15c <main+0x5a>
								{	
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
					//_delay_ms(100); /* wait for 500 melli second */
				}
				}else if( GET_BIT(PIND,2)==1)
 38e:	82 9b       	sbis	0x10, 2	; 16
 390:	1c c0       	rjmp	.+56     	; 0x3ca <main+0x2c8>
 392:	2f ef       	ldi	r18, 0xFF	; 255
 394:	86 e7       	ldi	r24, 0x76	; 118
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	21 50       	subi	r18, 0x01	; 1
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	90 40       	sbci	r25, 0x00	; 0
 39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x296>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x2a0>
 3a2:	00 00       	nop
			                    {_delay_ms(30);      //debounce time
						    char array[]={0,1,2,3,4,5,6,7,8,9};
 3a4:	8a e0       	ldi	r24, 0x0A	; 10
 3a6:	e0 e6       	ldi	r30, 0x60	; 96
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	de 01       	movw	r26, r28
 3ac:	11 96       	adiw	r26, 0x01	; 1
 3ae:	01 90       	ld	r0, Z+
 3b0:	0d 92       	st	X+, r0
 3b2:	8a 95       	dec	r24
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <main+0x2ac>
 3b6:	fe 01       	movw	r30, r28
 3b8:	31 96       	adiw	r30, 0x01	; 1
					/* write BCD value for CA display from 0 to 9 */

			                   for(int i=0;i<9;i++)
		                        {								
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 3ba:	81 91       	ld	r24, Z+
 3bc:	82 95       	swap	r24
 3be:	80 7f       	andi	r24, 0xF0	; 240
 3c0:	8b bb       	out	0x1b, r24	; 27
				}else if( GET_BIT(PIND,2)==1)
			                    {_delay_ms(30);      //debounce time
						    char array[]={0,1,2,3,4,5,6,7,8,9};
					/* write BCD value for CA display from 0 to 9 */

			                   for(int i=0;i<9;i++)
 3c2:	4e 16       	cp	r4, r30
 3c4:	5f 06       	cpc	r5, r31
 3c6:	c9 f7       	brne	.-14     	; 0x3ba <main+0x2b8>
 3c8:	c9 ce       	rjmp	.-622    	; 0x15c <main+0x5a>
		                        {								
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
					//_delay_ms(100); /* wait for 500 melli second */
			   	}
				}else if( GET_BIT(PIND,2)==1)
 3ca:	82 9b       	sbis	0x10, 2	; 16
 3cc:	c7 ce       	rjmp	.-626    	; 0x15c <main+0x5a>
 3ce:	2f ef       	ldi	r18, 0xFF	; 255
 3d0:	86 e7       	ldi	r24, 0x76	; 118
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <main+0x2d2>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <main+0x2dc>
 3de:	00 00       	nop
								{_delay_ms(30);      //debounce time
						    char array[]={0,1,2,3,4,5,6,7,8,9};
 3e0:	8a e0       	ldi	r24, 0x0A	; 10
 3e2:	e0 e6       	ldi	r30, 0x60	; 96
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	de 01       	movw	r26, r28
 3e8:	11 96       	adiw	r26, 0x01	; 1
 3ea:	01 90       	ld	r0, Z+
 3ec:	0d 92       	st	X+, r0
 3ee:	8a 95       	dec	r24
 3f0:	e1 f7       	brne	.-8      	; 0x3ea <main+0x2e8>
 3f2:	fe 01       	movw	r30, r28
 3f4:	31 96       	adiw	r30, 0x01	; 1
					/* write BCD value for CA display from 0 to 9 */
								for(int i=0;i<10;i++)
								{	
					SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
 3f6:	81 91       	ld	r24, Z+
 3f8:	82 95       	swap	r24
 3fa:	80 7f       	andi	r24, 0xF0	; 240
 3fc:	8b bb       	out	0x1b, r24	; 27
			   	}
				}else if( GET_BIT(PIND,2)==1)
								{_delay_ms(30);      //debounce time
						    char array[]={0,1,2,3,4,5,6,7,8,9};
					/* write BCD value for CA display from 0 to 9 */
								for(int i=0;i<10;i++)
 3fe:	0e 17       	cp	r16, r30
 400:	1f 07       	cpc	r17, r31
 402:	c9 f7       	brne	.-14     	; 0x3f6 <main+0x2f4>
 404:	ab ce       	rjmp	.-682    	; 0x15c <main+0x5a>

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
