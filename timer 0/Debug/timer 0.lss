
timer 0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000692  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  000008ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a4  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000330  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000121  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
volatile unsigned int counter=0;
int main(void)
{
	//volatile unsigned int counter=0;
	//prescaler clk/64   CS02=0  CS01=1  CS00=1
	TCCR0=(1<<CS00)|(1<<CS01); // 0000 0011
  7c:	83 e0       	ldi	r24, 0x03	; 3
  7e:	83 bf       	out	0x33, r24	; 51
	//Generate timer 0 Overflow interrupt enable
	TIMSK=(1<<TOIE0);
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	89 bf       	out	0x39, r24	; 57
	//LED 0 output pin pc2
	DDRC=(1<<2);     // led 0   pin pc2
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	84 bb       	out	0x14, r24	; 20
	DDRC|=(1<<7);    // led 1   pin pc7
  88:	a7 9a       	sbi	0x14, 7	; 20
	DDRD=(1<<3);     // led 2   pin pd3
  8a:	88 e0       	ldi	r24, 0x08	; 8
  8c:	81 bb       	out	0x11, r24	; 17
	//Global interrupt
	sei();
  8e:	78 94       	sei
	while(1)
		{
		if(counter>=50)//100ms
		{
			    PORTC^=(1<<2);
  90:	24 e0       	ldi	r18, 0x04	; 4
				_delay_ms(10);
				//counter=0;
			}
			 if(counter>=150)//100ms
			{
				PORTD^=(1<<3);
  92:	38 e0       	ldi	r19, 0x08	; 8
	DDRD=(1<<3);     // led 2   pin pd3
	//Global interrupt
	sei();
	while(1)
		{
		if(counter>=50)//100ms
  94:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  98:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  9c:	c2 97       	sbiw	r24, 0x32	; 50
  9e:	48 f0       	brcs	.+18     	; 0xb2 <main+0x36>
		{
			    PORTC^=(1<<2);
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	82 27       	eor	r24, r18
  a4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	8f e3       	ldi	r24, 0x3F	; 63
  a8:	9c e9       	ldi	r25, 0x9C	; 156
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x2e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x34>
  b0:	00 00       	nop
				_delay_ms(10);
		      // counter=0;
	    	}
			 if(counter>=100)//100ms
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ba:	84 36       	cpi	r24, 0x64	; 100
  bc:	91 05       	cpc	r25, r1
  be:	48 f0       	brcs	.+18     	; 0xd2 <main+0x56>
			{
				PORTC^=(1<<7);
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	80 58       	subi	r24, 0x80	; 128
  c4:	85 bb       	out	0x15, r24	; 21
  c6:	8f e3       	ldi	r24, 0x3F	; 63
  c8:	9c e9       	ldi	r25, 0x9C	; 156
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x4e>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x54>
  d0:	00 00       	nop
				_delay_ms(10);
				//counter=0;
			}
			 if(counter>=150)//100ms
  d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  d6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  da:	86 39       	cpi	r24, 0x96	; 150
  dc:	91 05       	cpc	r25, r1
  de:	d0 f2       	brcs	.-76     	; 0x94 <main+0x18>
			{
				PORTD^=(1<<3);
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	83 27       	eor	r24, r19
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	9c e9       	ldi	r25, 0x9C	; 156
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x6e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x74>
  f0:	00 00       	nop
				_delay_ms(10);
				counter=0;
  f2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  f6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  fa:	cc cf       	rjmp	.-104    	; 0x94 <main+0x18>

000000fc <__vector_11>:

     }
}
//main
//*****************************
ISR(TIMER0_OVF_vect){
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
	counter++;
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 10e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
