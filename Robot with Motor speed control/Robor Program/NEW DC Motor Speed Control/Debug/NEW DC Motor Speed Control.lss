
NEW DC Motor Speed Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000657  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000596  00000000  00000000  000008db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000389  00000000  00000000  00000e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000141  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_13>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	82 00       	.word	0x0082	; ????
  56:	9b 00       	.word	0x009b	; ????
  58:	70 00       	.word	0x0070	; ????
  5a:	9b 00       	.word	0x009b	; ????
  5c:	7d 00       	.word	0x007d	; ????
  5e:	9b 00       	.word	0x009b	; ????
  60:	9b 00       	.word	0x009b	; ????
  62:	9b 00       	.word	0x009b	; ????
  64:	9b 00       	.word	0x009b	; ????
  66:	9b 00       	.word	0x009b	; ????
  68:	8d 00       	.word	0x008d	; ????
  6a:	9b 00       	.word	0x009b	; ????
  6c:	9b 00       	.word	0x009b	; ????
  6e:	9b 00       	.word	0x009b	; ????
  70:	9b 00       	.word	0x009b	; ????
  72:	9b 00       	.word	0x009b	; ????
  74:	87 00       	.word	0x0087	; ????
  76:	93 00       	.word	0x0093	; ????
  78:	9b 00       	.word	0x009b	; ????
  7a:	62 00       	.word	0x0062	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  8c:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <__vector_13>:
#define BAUD 9600
#define MYUBRR   F_CPU/16/BAUD-1  //Asynchronous Normal Mode USART

//Serial Com , interrupt Service Routine or Button Switch 
ISR(USART_RXC_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
	char ReceivedByte ;
	ReceivedByte = UDR;  // Retrieves byte from serial port ( bluetooth Module )
  aa:	ec b1       	in	r30, 0x0c	; 12
	switch(ReceivedByte)
  ac:	8e 2f       	mov	r24, r30
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	e2 54       	subi	r30, 0x42	; 66
  b4:	f1 09       	sbc	r31, r1
  b6:	e4 31       	cpi	r30, 0x14	; 20
  b8:	f1 05       	cpc	r31, r1
  ba:	e8 f5       	brcc	.+122    	; 0x136 <__vector_13+0xa2>
  bc:	e6 5d       	subi	r30, 0xD6	; 214
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__tablejump2__>
	{
		case 'U':
		if(OCR0 <= 255)
  c4:	8c b7       	in	r24, 0x3c	; 60
		OCR0 += 10;
  c6:	8c b7       	in	r24, 0x3c	; 60
  c8:	86 5f       	subi	r24, 0xF6	; 246
  ca:	8c bf       	out	0x3c, r24	; 60
		PORTB&=~(1<<PB5); // Red LED Is Off
  cc:	c5 98       	cbi	0x18, 5	; 24
		PORTB|=(1<<PB7);  //Green Led is turn on
  ce:	c7 9a       	sbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8b e7       	ldi	r24, 0x7B	; 123
  d2:	92 e9       	ldi	r25, 0x92	; 146
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <__vector_13+0x40>
  d8:	00 c0       	rjmp	.+0      	; 0xda <__vector_13+0x46>
  da:	00 00       	nop
		_delay_ms(150);
		PORTB&=~(1<<PB7);  //Green Led is turn off
  dc:	c7 98       	cbi	0x18, 7	; 24
		break; // Increase PWM duty cycle by 10
  de:	2b c0       	rjmp	.+86     	; 0x136 <__vector_13+0xa2>
		
		case 'D':
		if(OCR0 >= 0)
  e0:	8c b7       	in	r24, 0x3c	; 60
		OCR0 -= 10;
  e2:	8c b7       	in	r24, 0x3c	; 60
  e4:	8a 50       	subi	r24, 0x0A	; 10
  e6:	8c bf       	out	0x3c, r24	; 60
		PORTB|=(1<<PB6); //turn on yellow LED
  e8:	c6 9a       	sbi	0x18, 6	; 24
  ea:	8b e7       	ldi	r24, 0x7B	; 123
  ec:	92 e9       	ldi	r25, 0x92	; 146
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__vector_13+0x5a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__vector_13+0x60>
  f4:	00 00       	nop
		_delay_ms(150);
		PORTB&=~(1<<PB6); // turn off yellow LED
  f6:	c6 98       	cbi	0x18, 6	; 24
		break;  //Decrease PWM duty cycle by 10
  f8:	1e c0       	rjmp	.+60     	; 0x136 <__vector_13+0xa2>
		
		case 'F' :
		PORTB&=~(1<<PB1);  //clear Dir pin
  fa:	c1 98       	cbi	0x18, 1	; 24
		PORTA&=~(1<<PA1);  //clear Dir pin
  fc:	d9 98       	cbi	0x1b, 1	; 27
		PORTB|=(1<<PB0);    // in 1 =1
  fe:	c0 9a       	sbi	0x18, 0	; 24
		PORTA|=(1<<PA0);    // in 3 =1
 100:	d8 9a       	sbi	0x1b, 0	; 27
		break; // change motor direction to forward
 102:	19 c0       	rjmp	.+50     	; 0x136 <__vector_13+0xa2>
		
		
	case 'B'  :
	PORTB&=~(1<<PB0);   // clear direction pin
 104:	c0 98       	cbi	0x18, 0	; 24
	PORTA&=~(1<<PA0);   // clear direction pin
 106:	d8 98       	cbi	0x1b, 0	; 27
	PORTB|=(1<<PB1);     //  in2 =1
 108:	c1 9a       	sbi	0x18, 1	; 24
	PORTA|=(1<<PA1);	 //  in4 =1
 10a:	d9 9a       	sbi	0x1b, 1	; 27
	break;  // Change motor Direction to be Backward
 10c:	14 c0       	rjmp	.+40     	; 0x136 <__vector_13+0xa2>
	
	case 'R'  :
	PORTB&=~(1<<PB0);   // clear direction pin
 10e:	c0 98       	cbi	0x18, 0	; 24
	PORTB&=~(1<<PB1);   // clear direction pin
 110:	c1 98       	cbi	0x18, 1	; 24
	PORTA&=~(1<<PA0);   // clear direction pin
 112:	d8 98       	cbi	0x1b, 0	; 27
	PORTA&=~(1<<PA1);   // clear direction pin
 114:	d9 98       	cbi	0x1b, 1	; 27
	PORTB|=(1<<PB0);           //in1 =1
 116:	c0 9a       	sbi	0x18, 0	; 24
	break;  // changed Motor Direction to Right
 118:	0e c0       	rjmp	.+28     	; 0x136 <__vector_13+0xa2>
	
	case 'L'  :
	PORTB&=~(1<<PB0);   // clear direction pin
 11a:	c0 98       	cbi	0x18, 0	; 24
	PORTB&=~(1<<PB1);   // clear direction pin
 11c:	c1 98       	cbi	0x18, 1	; 24
	PORTA&=~(1<<PA0);   // clear direction pin
 11e:	d8 98       	cbi	0x1b, 0	; 27
	PORTA&=~(1<<PA1);   // clear direction pin
 120:	d9 98       	cbi	0x1b, 1	; 27
	PORTA|=(1<<PA0);          //in3  =1
 122:	d8 9a       	sbi	0x1b, 0	; 27
	break;  // changed Motor Direction to Left
 124:	08 c0       	rjmp	.+16     	; 0x136 <__vector_13+0xa2>
	
	case 'S'  :
	PORTB |= 0b11; //in1 ,in2 =1
 126:	88 b3       	in	r24, 0x18	; 24
 128:	83 60       	ori	r24, 0x03	; 3
 12a:	88 bb       	out	0x18, r24	; 24
	PORTA |= 0b11; //in3 ,in4 =1
 12c:	8b b3       	in	r24, 0x1b	; 27
 12e:	83 60       	ori	r24, 0x03	; 3
 130:	8b bb       	out	0x1b, r24	; 27
	OCR0 = 0;
 132:	1c be       	out	0x3c, r1	; 60
	PORTB |=(1<<PB5);  // Red Led Will turn on
 134:	c5 9a       	sbi	0x18, 5	; 24
	break; // Stop Motor by Raising both Direction input , PWM duty cycle %0
	
	default :  
	break;  // character unknown to my routine , discard character
	}
}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <main>:

int main(void)
{
    /* I/O  Initialization  */
	DDRB |=(1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)|(1<<PB5)|(1<<PB6)|(1<<PB7);//Dir1, Enable 1 ,PWM pin & 3 LEDS as Output
 14c:	87 b3       	in	r24, 0x17	; 23
 14e:	8f 6e       	ori	r24, 0xEF	; 239
 150:	87 bb       	out	0x17, r24	; 23
	DDRA |=(1<<PA0)|(1<<PA1); // Dir2 , Enable Pins
 152:	8a b3       	in	r24, 0x1a	; 26
 154:	83 60       	ori	r24, 0x03	; 3
 156:	8a bb       	out	0x1a, r24	; 26
	PORTB =0;  // All Initialized = 0
 158:	18 ba       	out	0x18, r1	; 24
	PORTA =0;  // All Initialized = 0
 15a:	1b ba       	out	0x1b, r1	; 27
	/*Timer 0 Initialization */
	TCCR0=(1<<WGM00)|(1<<WGM01); // Fast PWM Mode
 15c:	88 e4       	ldi	r24, 0x48	; 72
 15e:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(1<<COM01); // set OC0 (PB3) At Bottom NON Inverting Mode.. Note that OCR0 is Connected To ( EN 1,2 )
 160:	83 b7       	in	r24, 0x33	; 51
 162:	80 62       	ori	r24, 0x20	; 32
 164:	83 bf       	out	0x33, r24	; 51
	TCCR0|=(1<<CS01); // PRESCALER /8
 166:	83 b7       	in	r24, 0x33	; 51
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	83 bf       	out	0x33, r24	; 51
	TCNT0=0;  //Initialize TCNT0
 16c:	12 be       	out	0x32, r1	; 50
	OCR0=0;   // Initialize PWM duty cycle to 0%
 16e:	1c be       	out	0x3c, r1	; 60
	/*UART  Initialization */
	UCSRB |=(1<<RXEN); // Enable RX 
 170:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC =(1<<URSEL)|(1<<USBS)|(3<<UCSZ0); //UBBR Register Enable , Frame is 8 bit , one stop bit
 172:	8e e8       	ldi	r24, 0x8E	; 142
 174:	80 bd       	out	0x20, r24	; 32
	UCSRC =(1<<UPM1)|(1<<UPM0); // ODD Parity Enable
 176:	80 e3       	ldi	r24, 0x30	; 48
 178:	80 bd       	out	0x20, r24	; 32
	UBRRL = MYUBRR;             // sets PAUDRATE Registers
 17a:	85 e0       	ldi	r24, 0x05	; 5
 17c:	89 b9       	out	0x09, r24	; 9
	UBRRH =(MYUBRR>>8);         // sets PAUDRATE Registers
 17e:	10 bc       	out	0x20, r1	; 32
	UCSRB |=(1<<RXCIE);         // Enable USART Interrupt
 180:	57 9a       	sbi	0x0a, 7	; 10
	
	sei(); // Global Interrupt Enable
 182:	78 94       	sei
    while (1)  // Never Gets out from here !
	
	return 0;  // Never reaches this point !
	{
	}
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	08 95       	ret

0000018a <__tablejump2__>:
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	05 90       	lpm	r0, Z+
 190:	f4 91       	lpm	r31, Z
 192:	e0 2d       	mov	r30, r0
 194:	09 94       	ijmp

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
