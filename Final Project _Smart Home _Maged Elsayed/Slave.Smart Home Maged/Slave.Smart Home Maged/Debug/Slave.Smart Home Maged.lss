
Slave.Smart Home Maged.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000814  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005da  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  0000102a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024b  00000000  00000000  000016ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3b 00 	call	0x76	; 0x76 <main>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_Transfer>:
#define LED0	5
#define LED1	6
#define LED2	7
unsigned char SPI_Transfer(unsigned char sendByte){
	
	SPDR =sendByte;
  6c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  6e:	77 9b       	sbis	0x0e, 7	; 14
  70:	fe cf       	rjmp	.-4      	; 0x6e <SPI_Transfer+0x2>
	return SPDR;
  72:	8f b1       	in	r24, 0x0f	; 15
}
  74:	08 95       	ret

00000076 <main>:
int main(void)
{
	/* I/O  Initialization  */
	DDRA|=(1<<PA0)|(1<<PA1)|(1<<PA2);//Dir1, Enable  Motor ROOM 3 Control , IN1,IN2,EN
  76:	8a b3       	in	r24, 0x1a	; 26
  78:	87 60       	ori	r24, 0x07	; 7
  7a:	8a bb       	out	0x1a, r24	; 26
	DDRD|=(1<<LED0);//|(1<<LED1)(1<<LED2); //LED0 ROOM 1 ,LED ROOM 1 , LED2 ROOM 2
  7c:	8d 9a       	sbi	0x11, 5	; 17
	DDRB|=(1<<MISO);
  7e:	be 9a       	sbi	0x17, 6	; 23
	DDRB&=~(1<<SS); //input pin
  80:	bc 98       	cbi	0x17, 4	; 23
	
	SPCR|=(1<<SPE);
  82:	6e 9a       	sbi	0x0d, 6	; 13
		else 
		{ 
			recvByte=SPI_Transfer(0X01);
			_delay_ms(1000);
			(recvByte==0X0A);
			PORTD^=(1<<LED0);
  84:	d0 e2       	ldi	r29, 0x20	; 32
		else
		{
			recvByte=SPI_Transfer(0X02);
			_delay_ms(1000);
			(recvByte==0X0B);
			PORTD^=(1<<LED1);
  86:	c0 e4       	ldi	r28, 0x40	; 64
	
	SPCR|=(1<<SPE);

    while (1) 
    {
		unsigned char recvByte=SPI_Transfer(0X11);
  88:	81 e1       	ldi	r24, 0x11	; 17
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f ef       	ldi	r18, 0xFF	; 255
  90:	33 ed       	ldi	r19, 0xD3	; 211
  92:	90 e3       	ldi	r25, 0x30	; 48
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x1e>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x28>
  9e:	00 00       	nop
		_delay_ms(1000);
		if(recvByte==0XAA){
  a0:	8a 3a       	cpi	r24, 0xAA	; 170
  a2:	59 f4       	brne	.+22     	; 0xba <main+0x44>
			PORTD=(1<<LED0);
  a4:	d2 bb       	out	0x12, r29	; 18
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	33 e2       	ldi	r19, 0x23	; 35
  aa:	84 ef       	ldi	r24, 0xF4	; 244
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x36>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x40>
  b6:	00 00       	nop
  b8:	18 c0       	rjmp	.+48     	; 0xea <main+0x74>
			
			_delay_ms(5000);
		}
		else 
		{ 
			recvByte=SPI_Transfer(0X01);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Transfer>
  c0:	9f ef       	ldi	r25, 0xFF	; 255
  c2:	23 ed       	ldi	r18, 0xD3	; 211
  c4:	30 e3       	ldi	r19, 0x30	; 48
  c6:	91 50       	subi	r25, 0x01	; 1
  c8:	20 40       	sbci	r18, 0x00	; 0
  ca:	30 40       	sbci	r19, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x50>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x5a>
  d0:	00 00       	nop
			_delay_ms(1000);
			(recvByte==0X0A);
			PORTD^=(1<<LED0);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8d 27       	eor	r24, r29
  d6:	82 bb       	out	0x12, r24	; 18
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	93 e2       	ldi	r25, 0x23	; 35
  dc:	24 ef       	ldi	r18, 0xF4	; 244
  de:	81 50       	subi	r24, 0x01	; 1
  e0:	90 40       	sbci	r25, 0x00	; 0
  e2:	20 40       	sbci	r18, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x68>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x72>
  e8:	00 00       	nop
			
			_delay_ms(5000);
			
		}
		//*******************************************
		recvByte=SPI_Transfer(0X22);
  ea:	82 e2       	ldi	r24, 0x22	; 34
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Transfer>
  f0:	3f ef       	ldi	r19, 0xFF	; 255
  f2:	93 ed       	ldi	r25, 0xD3	; 211
  f4:	20 e3       	ldi	r18, 0x30	; 48
  f6:	31 50       	subi	r19, 0x01	; 1
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	20 40       	sbci	r18, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x80>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x8a>
 100:	00 00       	nop
		_delay_ms(1000);
		if(recvByte==0XBB){
 102:	8b 3b       	cpi	r24, 0xBB	; 187
 104:	59 f4       	brne	.+22     	; 0x11c <main+0xa6>
			PORTD=(1<<LED1);
 106:	c2 bb       	out	0x12, r28	; 18
 108:	3f ef       	ldi	r19, 0xFF	; 255
 10a:	83 e2       	ldi	r24, 0x23	; 35
 10c:	94 ef       	ldi	r25, 0xF4	; 244
 10e:	31 50       	subi	r19, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x98>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0xa2>
 118:	00 00       	nop
 11a:	b6 cf       	rjmp	.-148    	; 0x88 <main+0x12>
			
			_delay_ms(5000);
		}
		else
		{
			recvByte=SPI_Transfer(0X02);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_Transfer>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	33 ed       	ldi	r19, 0xD3	; 211
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0xb2>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0xbc>
 132:	00 00       	nop
			_delay_ms(1000);
			(recvByte==0X0B);
			PORTD^=(1<<LED1);
 134:	82 b3       	in	r24, 0x12	; 18
 136:	8c 27       	eor	r24, r28
 138:	82 bb       	out	0x12, r24	; 18
 13a:	9f ef       	ldi	r25, 0xFF	; 255
 13c:	23 e2       	ldi	r18, 0x23	; 35
 13e:	34 ef       	ldi	r19, 0xF4	; 244
 140:	91 50       	subi	r25, 0x01	; 1
 142:	20 40       	sbci	r18, 0x00	; 0
 144:	30 40       	sbci	r19, 0x00	; 0
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0xca>
 148:	00 c0       	rjmp	.+0      	; 0x14a <main+0xd4>
 14a:	00 00       	nop
 14c:	9d cf       	rjmp	.-198    	; 0x88 <main+0x12>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
