
Master.Smart Home Maged.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  0000017c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f0  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000375  00000000  00000000  00001161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  000014d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000241  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_13>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  7a:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uartInit>:
void SPI_Init(){
	
	DDRB|=(1<<MOSI)|(1<<SCK);
	DDRC|=(1<<CS);
	
	SPCR|=(1<<MSTR)|(1<<SPE)|(1<<SPR0);
  82:	87 e6       	ldi	r24, 0x67	; 103
  84:	89 b9       	out	0x09, r24	; 9
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	08 95       	ret

00000090 <uartSend>:
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <uartSend>
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <uart_sendString>:
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	fc 01       	movw	r30, r24
  a0:	80 81       	ld	r24, Z
  a2:	88 23       	and	r24, r24
  a4:	59 f0       	breq	.+22     	; 0xbc <uart_sendString+0x24>
  a6:	8f 01       	movw	r16, r30
  a8:	c0 e0       	ldi	r28, 0x00	; 0
  aa:	0e 94 48 00 	call	0x90	; 0x90 <uartSend>
  ae:	cf 5f       	subi	r28, 0xFF	; 255
  b0:	f8 01       	movw	r30, r16
  b2:	ec 0f       	add	r30, r28
  b4:	f1 1d       	adc	r31, r1
  b6:	80 81       	ld	r24, Z
  b8:	81 11       	cpse	r24, r1
  ba:	f7 cf       	rjmp	.-18     	; 0xaa <uart_sendString+0x12>
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	0f 91       	pop	r16
  c2:	08 95       	ret

000000c4 <SPI_Transfer>:
}
unsigned char SPI_Transfer(unsigned char sendByte){
	
	SPDR=sendByte;
  c4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <SPI_Transfer+0x2>
	return SPDR;
  ca:	8f b1       	in	r24, 0x0f	; 15
}
  cc:	08 95       	ret

000000ce <__vector_13>:
void uartSend(char data);
unsigned char SPI_Transfer(unsigned char sendByte);

//Serial Com , interrupt Service Routine 
volatile ISR(USART_RXC_vect)
{
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
  d8:	2f 93       	push	r18
  da:	3f 93       	push	r19
  dc:	4f 93       	push	r20
  de:	5f 93       	push	r21
  e0:	6f 93       	push	r22
  e2:	7f 93       	push	r23
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
  e8:	af 93       	push	r26
  ea:	bf 93       	push	r27
  ec:	ef 93       	push	r30
  ee:	ff 93       	push	r31
	//uartInit();
	char ReceivedByte ;
	ReceivedByte = UDR;  // Retrieves byte from serial port ( bluetooth Module ) 
  f0:	8c b1       	in	r24, 0x0c	; 12
	switch(ReceivedByte)     // Tested By RealTerm & Configure Virtual Serial Port Drive Program
  f2:	82 35       	cpi	r24, 0x52	; 82
  f4:	f9 f4       	brne	.+62     	; 0x134 <__vector_13+0x66>
	{
		case 'R':   //Case 'R' LED 1 Room 1 set on
		SS_ENABLE();
  f6:	a8 98       	cbi	0x15, 0	; 21
		unsigned char recvByte=SPI_Transfer(0xAA);
  f8:	8a ea       	ldi	r24, 0xAA	; 170
  fa:	0e 94 62 00 	call	0xc4	; 0xc4 <SPI_Transfer>
		SS_DISABLE();
  fe:	a8 9a       	sbi	0x15, 0	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	33 ed       	ldi	r19, 0xD3	; 211
 104:	90 e3       	ldi	r25, 0x30	; 48
 106:	21 50       	subi	r18, 0x01	; 1
 108:	30 40       	sbci	r19, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <__vector_13+0x38>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <__vector_13+0x42>
 110:	00 00       	nop
		_delay_ms(1000);
		if(recvByte==0x11)
 112:	81 31       	cpi	r24, 0x11	; 17
 114:	11 f4       	brne	.+4      	; 0x11a <__vector_13+0x4c>
		{
			PORTD=(1<<LED0);    
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	82 bb       	out	0x12, r24	; 18
		}
		uart_sendString("LED_1_ROOM_1_ON\r\n");
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 4c 00 	call	0x98	; 0x98 <uart_sendString>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	33 e2       	ldi	r19, 0x23	; 35
 126:	84 ef       	ldi	r24, 0xF4	; 244
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <__vector_13+0x5a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <__vector_13+0x64>
 132:	00 00       	nop
		break;
		
		default :
		break;  
	}
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <main>:



int main(void)
{
	uartInit();
 156:	0e 94 41 00 	call	0x82	; 0x82 <uartInit>
	sei(); // Global Interrupt Enable
 15a:	78 94       	sei
	

	while (1)
	{
		uart_sendString("SMART_HOME_MAGED\r\n");
 15c:	82 e7       	ldi	r24, 0x72	; 114
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 4c 00 	call	0x98	; 0x98 <uart_sendString>
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	87 ea       	ldi	r24, 0xA7	; 167
 168:	91 e6       	ldi	r25, 0x61	; 97
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x14>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x1e>
 174:	00 00       	nop
 176:	f2 cf       	rjmp	.-28     	; 0x15c <main+0x6>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
