
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f2  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  000008c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002be  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000313  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017d  00000000  00000000  0000143f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    // Direction  OC0 out put
	DDRB|=(1<<3); 
  6c:	bb 9a       	sbi	0x17, 3	; 23
	//TIMER 0 AT NO PRESCALE AND FAST PWM , INVERTING MODE
	TCCR0=(1<<CS00)|(1<<WGM00)|(1<<WGM01)|(1<<COM00)|(1<<COM01);
  6e:	89 e7       	ldi	r24, 0x79	; 121
  70:	83 bf       	out	0x33, r24	; 51
    while (1) 
    {
		// LED to be DIMMED
		OCR0=127;
  72:	9f e7       	ldi	r25, 0x7F	; 127
    for(int i=0;i<255;i++)
		{
			OCR0=i;
			_delay_ms(50);
    }
	OCR0=254;
  74:	4e ef       	ldi	r20, 0xFE	; 254
	//TIMER 0 AT NO PRESCALE AND FAST PWM , INVERTING MODE
	TCCR0=(1<<CS00)|(1<<WGM00)|(1<<WGM01)|(1<<COM00)|(1<<COM01);
    while (1) 
    {
		// LED to be DIMMED
		OCR0=127;
  76:	9c bf       	out	0x3c, r25	; 60
  78:	80 e0       	ldi	r24, 0x00	; 0
    for(int i=0;i<255;i++)
		{
			OCR0=i;
  7a:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	30 e7       	ldi	r19, 0x70	; 112
  80:	52 e0       	ldi	r21, 0x02	; 2
  82:	21 50       	subi	r18, 0x01	; 1
  84:	30 40       	sbci	r19, 0x00	; 0
  86:	50 40       	sbci	r21, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
  8e:	8f 5f       	subi	r24, 0xFF	; 255
	TCCR0=(1<<CS00)|(1<<WGM00)|(1<<WGM01)|(1<<COM00)|(1<<COM01);
    while (1) 
    {
		// LED to be DIMMED
		OCR0=127;
    for(int i=0;i<255;i++)
  90:	8f 3f       	cpi	r24, 0xFF	; 255
  92:	99 f7       	brne	.-26     	; 0x7a <main+0xe>
		{
			OCR0=i;
			_delay_ms(50);
    }
	OCR0=254;
  94:	4c bf       	out	0x3c, r20	; 60
  96:	80 e0       	ldi	r24, 0x00	; 0
	for(int i=0;i<255;i++)
	{
		OCR0=i;
  98:	8c bf       	out	0x3c, r24	; 60
  9a:	6f ef       	ldi	r22, 0xFF	; 255
  9c:	70 e7       	ldi	r23, 0x70	; 112
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	61 50       	subi	r22, 0x01	; 1
  a2:	70 40       	sbci	r23, 0x00	; 0
  a4:	20 40       	sbci	r18, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x3e>
  aa:	00 00       	nop
  ac:	8f 5f       	subi	r24, 0xFF	; 255
		{
			OCR0=i;
			_delay_ms(50);
    }
	OCR0=254;
	for(int i=0;i<255;i++)
  ae:	8f 3f       	cpi	r24, 0xFF	; 255
  b0:	99 f7       	brne	.-26     	; 0x98 <main+0x2c>
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	30 e0       	ldi	r19, 0x00	; 0
		OCR0=i;
		_delay_ms(50);
	}
	for(int i=255;i>0;i--)
	{
		OCR0=127;
  b6:	9c bf       	out	0x3c, r25	; 60
  b8:	5f ef       	ldi	r21, 0xFF	; 255
  ba:	60 e7       	ldi	r22, 0x70	; 112
  bc:	72 e0       	ldi	r23, 0x02	; 2
  be:	51 50       	subi	r21, 0x01	; 1
  c0:	60 40       	sbci	r22, 0x00	; 0
  c2:	70 40       	sbci	r23, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x52>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x5c>
  c8:	00 00       	nop
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
	for(int i=0;i<255;i++)
	{
		OCR0=i;
		_delay_ms(50);
	}
	for(int i=255;i>0;i--)
  ce:	99 f7       	brne	.-26     	; 0xb6 <main+0x4a>
		OCR0=127;
		_delay_ms(50);
	} 
	for(int i=255;i>0;i--)
	{
		OCR0=i;
  d0:	8c bf       	out	0x3c, r24	; 60
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	30 e7       	ldi	r19, 0x70	; 112
  d6:	52 e0       	ldi	r21, 0x02	; 2
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	50 40       	sbci	r21, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x6c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x76>
  e2:	00 00       	nop
  e4:	81 50       	subi	r24, 0x01	; 1
	for(int i=255;i>0;i--)
	{
		OCR0=127;
		_delay_ms(50);
	} 
	for(int i=255;i>0;i--)
  e6:	a1 f7       	brne	.-24     	; 0xd0 <main+0x64>
  e8:	c6 cf       	rjmp	.-116    	; 0x76 <main+0xa>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
